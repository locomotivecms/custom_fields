require 'spec_helper'

describe 'Class generated by CustomFieldsFor' do

  before(:each) do
    @blog = create_blog
  end

  it 'owns only one validator' do
    @blog.posts.build.class.validators.size.should == 3
  end

  it 'does not duplicate the list of validators if adding new fields' do
    3.times do |i|
      @blog.posts_custom_fields.build label: "field #{i}", type: 'string'
      @blog.save.should be_true
      @blog.send(:refresh_posts_metadata)
    end

    @blog = Blog.find(@blog._id) # hard reload
    @blog.posts.build.class.validators.size.should == 3

    @blog.klass_with_custom_fields(:posts).validators.size.should == 3
  end
  
  it "validates uniqueness" do
    post = @blog.posts.create(post_attributes)
    post.should be_valid
    post = @blog.posts.create(post_attributes)
    post.should_not be_valid
    post.errors[:codename].first.should == "is already taken"
  end

  def create_blog
    Blog.new(name: 'My personal blog').tap do |blog|
      blog.posts_custom_fields.build label: 'Codename',     type: 'string', unique: true
      blog.posts_custom_fields.build label: 'Main Author',  type: 'string', required: true
      blog.posts_custom_fields.build label: 'Location',     type: 'string'
      blog.save & blog.reload
    end
  end
  
  def post_attributes
    {title: "My fancy post", body: "Lipsum", codename: "blog", main_author: "Me", location: "Somewhere"}
  end
end